Changes for the build to work on Solaris

Potentially suitable to send upstream

--- a/Source/WTF/wtf/PlatformCPU.h	2018-08-15 09:53:48.950348332 -0700
+++ b/Source/WTF/wtf/PlatformCPU.h	2018-08-15 10:09:02.845778665 -0700
@@ -118,6 +118,7 @@
 #if defined(__sparc) && !defined(__arch64__) || defined(__sparcv8)
 #define WTF_CPU_SPARC32 1
 #define WTF_CPU_BIG_ENDIAN 1
+#define WTF_CPU_KNOWN 1
 #endif
 
 /* CPU(SPARC64) - SPARC 64-bit */
@@ -124,11 +125,13 @@
 #if defined(__sparc__) && defined(__arch64__) || defined (__sparcv9)
 #define WTF_CPU_SPARC64 1
 #define WTF_CPU_BIG_ENDIAN 1
+#define WTF_CPU_KNOWN 1
 #endif
 
 /* CPU(SPARC) - any SPARC, true for CPU(SPARC32) and CPU(SPARC64) */
 #if CPU(SPARC32) || CPU(SPARC64)
 #define WTF_CPU_SPARC 1
+#define WTF_CPU_KNOWN 1
 #endif
 
 /* CPU(X86) - i386 / x86 32-bit */
--- a/Source/WTF/wtf/PlatformOS.h	2018-08-15 09:53:48.950348332 -0700
+++ b/Source/WTF/wtf/PlatformOS.h	2018-08-15 10:09:02.845778665 -0700
@@ -398,6 +401,11 @@
 #define WTF_OS_OPENBSD 1
 #endif
 
+/* OS(SOLARIS) - Solaris */
+#if defined(sun) || defined(__sun)
+#define WTF_OS_SOLARIS 1
+#endif
+
 /* OS(WINDOWS) - Any version of Windows */
 #if defined(WIN32) || defined(_WIN32)
 #define WTF_OS_WINDOWS 1
@@ -414,6 +422,7 @@
     || OS(LINUX)            \
     || OS(NETBSD)           \
     || OS(OPENBSD)          \
+    || OS(SOLARIS)          \
     || defined(unix)        \
     || defined(__unix)      \
     || defined(__unix__)
--- a/Source/WTF/wtf/PlatformHave.h	2018-08-15 09:53:48.950348332 -0700
+++ b/Source/WTF/wtf/PlatformHave.h	2018-08-15 10:09:02.845778665 -0700
@@ -216,7 +216,7 @@
 #define HAVE_HOSTED_CORE_ANIMATION 1
 #endif
 
-#if OS(DARWIN) || OS(FUCHSIA) || ((OS(FREEBSD) || defined(__GLIBC__) || defined(__BIONIC__)) && (CPU(X86) || CPU(X86_64) || CPU(ARM) || CPU(ARM64) || CPU(MIPS)))
+#if OS(SOLARIS) || OS(DARWIN) || OS(FUCHSIA) || ((OS(FREEBSD) || defined(__GLIBC__) || defined(__BIONIC__)) && (CPU(X86) || CPU(X86_64) || CPU(ARM) || CPU(ARM64) || CPU(MIPS)))
 #define HAVE_MACHINE_CONTEXT 1
 #endif
 
@@ -1325,7 +1334,7 @@
 #define HAVE_RSA_PSS 1
 #endif
 
-#if !OS(WINDOWS)
+#if !OS(WINDOWS) && !OS(SOLARIS)
 #define HAVE_STACK_BOUNDS_FOR_NEW_THREAD 1
 #endif
 
--- webkitgtk-2.22.1/Source/WTF/wtf/InlineASM.h.~2~	2018-09-21 15:44:27.100682339 +0000
+++ webkitgtk-2.22.1/Source/WTF/wtf/InlineASM.h	2018-09-21 15:46:02.981322402 +0000
@@ -68,6 +68,7 @@
     || OS(FREEBSD)             \
     || OS(FUCHSIA)             \
     || OS(OPENBSD)             \
+    || OS(SOLARIS)             \
     || OS(HPUX)                \
     || OS(NETBSD)
     // ELF platform
--- a/Source/WTF/wtf/NumberOfCores.cpp	2018-08-15 10:12:46.542551846 -0700
+++ b/Source/WTF/wtf/NumberOfCores.cpp	2018-08-15 10:13:55.247620671 -0700
@@ -34,7 +34,7 @@
 // data types defined in the former. See sysctl(3) and style(9).
 #include <sys/types.h>
 #include <sys/sysctl.h>
-#elif OS(LINUX) || OS(AIX) || OS(OPENBSD) || OS(NETBSD) || OS(FREEBSD)
+#elif OS(LINUX) || OS(AIX) || OS(SOLARIS) || OS(OPENBSD) || OS(NETBSD) || OS(FREEBSD)
 #include <unistd.h>
 #elif OS(WINDOWS)
 #include <windows.h>
@@ -69,7 +69,7 @@
     int sysctlResult = sysctl(name, sizeof(name) / sizeof(int), &result, &length, 0, 0);
 
     s_numberOfCores = sysctlResult < 0 ? defaultIfUnavailable : result;
-#elif OS(LINUX) || OS(AIX) || OS(OPENBSD) || OS(NETBSD) || OS(FREEBSD)
+#elif OS(LINUX) || OS(AIX) || OS(SOLARIS) || OS(OPENBSD) || OS(NETBSD) || OS(FREEBSD)
     long sysconfResult = sysconf(_SC_NPROCESSORS_ONLN);
 
     s_numberOfCores = sysconfResult < 0 ? defaultIfUnavailable : static_cast<int>(sysconfResult);
--- a/Source/WTF/wtf/StackBounds.cpp	2018-08-15 10:14:40.847145054 -0700
+++ b/Source/WTF/wtf/StackBounds.cpp	2018-08-15 10:17:23.584352622 -0700
@@ -33,6 +33,10 @@
 
 #include <windows.h>
 
+#elif OS(SOLARIS)
+
+#include <thread.h>
+
 #elif OS(UNIX)
 
 #include <pthread.h>
@@ -102,6 +106,17 @@
     return newThreadStackBounds(pthread_self());
 }
 
+#elif OS(SOLARIS)
+
+StackBounds StackBounds::currentThreadStackBoundsInternal()
+{
+    stack_t s;
+    thr_stksegment(&s);
+    void* origin = s.ss_sp;
+    void* bound = static_cast<char*>(origin) - s.ss_size;
+    return StackBounds { origin, bound };
+}
+
 #elif OS(UNIX)
 
 #if OS(OPENBSD)
--- a/Source/WTF/wtf/posix/ThreadingPOSIX.cpp	2018-08-15 10:18:02.570722929 -0700
+++ b/Source/WTF/wtf/posix/ThreadingPOSIX.cpp	2018-08-15 10:19:25.133374993 -0700
@@ -59,7 +59,12 @@
 #include <semaphore.h>
 #include <sys/mman.h>
 #include <unistd.h>
+
+#if OS(SOLARIS)
+#include <thread.h>
+#else
 #include <pthread.h>
+#endif
 
 #if HAVE(PTHREAD_NP_H)
 #include <pthread_np.h>
--- a/Source/JavaScriptCore/wasm/WasmSectionParser.cpp	2019-11-16 15:03:46.000000000 +0000
+++ b/Source/JavaScriptCore/wasm/WasmSectionParser.cpp	2019-11-17 12:32:57.495893244 +0000
@@ -54,7 +54,7 @@
         Vector<Type> argumentTypes;
 
         WASM_PARSER_FAIL_IF(!parseInt7(type), "can't get ", i, "th Type's type");
-        WASM_PARSER_FAIL_IF(type != Func, i, "th Type is non-Func ", type);
+        WASM_PARSER_FAIL_IF(type != Func, i, "th Type is non-Func ", (signed char)type);
         WASM_PARSER_FAIL_IF(!parseVarUInt32(argumentCount), "can't get ", i, "th Type's argument count");
         WASM_PARSER_FAIL_IF(argumentCount > maxFunctionParams, i, "th argument count is too big ", argumentCount, " maximum ", maxFunctionParams);
         Vector<Type> arguments;
@@ -201,7 +201,7 @@
 
     int8_t type;
     WASM_PARSER_FAIL_IF(!parseInt7(type), "can't parse Table type");
-    WASM_PARSER_FAIL_IF(type != Wasm::Funcref && type != Wasm::Anyref, "Table type should be funcref or anyref, got ", type);
+    WASM_PARSER_FAIL_IF(type != Wasm::Funcref && type != Wasm::Anyref, "Table type should be funcref or anyref, got ", (signed char)type);
 
     uint32_t initial;
     Optional<uint32_t> maximum;

--- a/Source/WTF/wtf/RAMSize.cpp	2019-09-18 09:52:36.000000000 +0000
+++ b/Source/WTF/wtf/RAMSize.cpp	2019-11-29 14:15:59.012169645 +0000
@@ -34,6 +34,8 @@
 #elif defined(USE_SYSTEM_MALLOC) && USE_SYSTEM_MALLOC
 #if OS(LINUX)
 #include <sys/sysinfo.h>
+#elif OS(SOLARIS)
+#include <unistd.h>
 #endif // OS(LINUX)
 #else
 #include <bmalloc/bmalloc.h>
@@ -59,6 +61,8 @@
     struct sysinfo si;
     sysinfo(&si);
     return si.totalram * si.mem_unit;
+#elif OS(SOLARIS)
+    return sysconf(_SC_PHYS_PAGES) * sysconf(_SC_PAGESIZE);
 #else
 #error "Missing a platform specific way of determining the available RAM"
 #endif // OS(LINUX)
--- a/Source/JavaScriptCore/runtime/MachineContext.h	2020-05-14 18:09:21.000000000 +0000
+++ b/Source/JavaScriptCore/runtime/MachineContext.h	2020-05-29 18:34:00.405996855 +0000
@@ -196,7 +196,7 @@
 #error Unknown Architecture
 #endif
 
-#elif OS(FUCHSIA) || defined(__GLIBC__) || defined(__BIONIC__)
+#elif OS(SOLARIS) || OS(FUCHSIA) || defined(__GLIBC__) || defined(__BIONIC__)
 
 #if CPU(X86)
     return reinterpret_cast<void*&>((uintptr_t&) machineContext.gregs[REG_ESP]);
@@ -347,7 +347,7 @@
 #error Unknown Architecture
 #endif
 
-#elif OS(FUCHSIA) || defined(__GLIBC__) || defined(__BIONIC__)
+#elif OS(SOLARIS) || OS(FUCHSIA) || defined(__GLIBC__) || defined(__BIONIC__)
 
 // The following sequence depends on glibc's sys/ucontext.h.
 #if CPU(X86)
@@ -498,7 +498,7 @@
 #error Unknown Architecture
 #endif
 
-#elif OS(FUCHSIA) || defined(__GLIBC__) || defined(__BIONIC__)
+#elif OS(SOLARIS) || OS(FUCHSIA) || defined(__GLIBC__) || defined(__BIONIC__)
 
 // The following sequence depends on glibc's sys/ucontext.h.
 #if CPU(X86)
@@ -656,7 +656,7 @@
 #error Unknown Architecture
 #endif
 
-#elif OS(FUCHSIA) || defined(__GLIBC__) || defined(__BIONIC__)
+#elif OS(SOLARIS) || OS(FUCHSIA) || defined(__GLIBC__) || defined(__BIONIC__)
 
 // The following sequence depends on glibc's sys/ucontext.h.
 #if CPU(X86)
@@ -773,7 +773,7 @@
 #error Unknown Architecture
 #endif
 
-#elif OS(FUCHSIA) || defined(__GLIBC__) || defined(__BIONIC__)
+#elif OS(SOLARIS) || OS(FUCHSIA) || defined(__GLIBC__) || defined(__BIONIC__)
 
 // The following sequence depends on glibc's sys/ucontext.h.
 #if CPU(X86)
