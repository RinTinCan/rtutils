--- a/CMakeLists.txt	2018-10-20 19:40:54.824454237 +0000
+++ b/CMakeLists.txt	2018-10-20 19:44:01.881704567 +0000
@@ -94,7 +94,13 @@
 elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "(x64|x86_64|amd64)")
     set(WTF_CPU_X86_64 1)
 elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "(i[3-6]86|x86)")
-    set(WTF_CPU_X86 1)
+    # On some OSes, uname -p always reports i386, even for 64-bit.
+    # We must check the pointer size to determine the target architecture.
+    if (CMAKE_SIZEOF_VOID_P MATCHES 8)
+        set(WTF_CPU_X86_64 1)
+    else ()
+        set(WTF_CPU_X86 1)
+    endif ()    
 elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "ppc")
     set(WTF_CPU_PPC 1)
 elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64")
--- a/Source/JavaScriptCore/wasm/WasmFaultSignalHandler.cpp	2018-08-06 15:07:41.000000000 +0000
+++ b/Source/JavaScriptCore/wasm/WasmFaultSignalHandler.cpp	2018-10-20 21:32:02.664436570 +0000
@@ -50,10 +50,10 @@
 static Lock codeLocationsLock;
 static LazyNeverDestroyed<HashSet<std::tuple<void*, void*>>> codeLocations; // (start, end)
 
-#if ENABLE(WEBASSEMBLY_FAST_MEMORY)
-
 static bool fastHandlerInstalled { false };
 
+#if ENABLE(WEBASSEMBLY_FAST_MEMORY)
+
 static SignalAction trapHandler(Signal, SigInfo& sigInfo, PlatformRegisters& context)
 {
     auto instructionPointer = MachineContext::instructionPointer(context);
