--- a/Source/WTF/wtf/Packed.h	2019-08-11 12:17:10.000000000 +0000
+++ b/Source/WTF/wtf/Packed.h	2019-08-16 14:45:51.830630845 +0000
@@ -143,6 +143,17 @@
 #endif
         if (isAlignmentShiftProfitable)
             value <<= alignmentShiftSize;
+
+#if CPU(X86_64)
+        // The AMD specification requires that the most significant 16
+        // bits of any virtual address, bits 48 through 63, must be
+        // copies of bit 47 (in a manner akin to sign extension).
+        //
+        // Reference: https://en.wikipedia.org/wiki/X86-64#Virtual_address_space_details
+        if(value & 0x1ULL << 47)
+            value |= 0xffffULL << 48;
+#endif
+
         return bitwise_cast<T*>(value);
     }
 
@@ -149,6 +160,10 @@
     void set(T* passedValue)
     {
         uintptr_t value = bitwise_cast<uintptr_t>(passedValue);
+#if CPU(X86_64)
+        // Ensure bits 48-63 track the value of bit 47, per the AMD spec.
+        ASSERT(bitwise_cast<intptr_t>(value) == (bitwise_cast<intptr_t>(value) << 16) >> 16);
+#endif
         if (isAlignmentShiftProfitable)
             value >>= alignmentShiftSize;
 #if CPU(LITTLE_ENDIAN)
--- a/Source/JavaScriptCore/wasm/js/WebAssemblyFunction.cpp	2020-06-28 16:18:24.500705971 +0000
+++ b/Source/JavaScriptCore/wasm/js/WebAssemblyFunction.cpp	2020-06-28 16:32:51.721645102 +0000
@@ -122,10 +122,10 @@
     {
         // We do the stack check here for the wrapper function because we don't
         // want to emit a stack check inside every wrapper function.
-        const intptr_t sp = bitwise_cast<intptr_t>(currentStackPointer());
-        const intptr_t frameSize = (boxedArgs.size() + CallFrame::headerSizeInRegisters) * sizeof(Register);
-        const intptr_t stackSpaceUsed = 2 * frameSize; // We're making two calls. One to the wrapper, and one to the actual wasm code.
-        if (UNLIKELY((sp < stackSpaceUsed) || ((sp - stackSpaceUsed) < bitwise_cast<intptr_t>(vm.softStackLimit()))))
+        const uintptr_t sp = bitwise_cast<uintptr_t>(currentStackPointer());
+        const uintptr_t frameSize = (boxedArgs.size() + CallFrame::headerSizeInRegisters) * sizeof(Register);
+        const uintptr_t stackSpaceUsed = 2 * frameSize; // We're making two calls. One to the wrapper, and one to the actual wasm code.
+        if (UNLIKELY((sp < stackSpaceUsed) || ((sp - stackSpaceUsed) < bitwise_cast<uintptr_t>(vm.softStackLimit()))))
             return JSValue::encode(throwException(globalObject, scope, createStackOverflowError(globalObject)));
     }
     vm.wasmContext.store(wasmInstance, vm.softStackLimit());
