--- gnome-maps-3.38.2/meson.build	2020-11-21 13:24:04.000000000 +0000
+++ gnome-maps-3.38.2/meson.build	2020-12-04 18:07:43.999266640 +0000
@@ -33,7 +33,6 @@
 
 libmaps_deps = [
 	dependency('gee-0.8', version: '>= 0.16.0'),
-	dependency('folks', version: '>= 0.10.0'),
 	dependency('geocode-glib-1.0', version: '>= 3.15.2'),
 	dependency('champlain-0.12', version: '>= 0.12.14'),
 	dependency('libxml-2.0'),
--- gnome-maps-3.38.2/lib/meson.build	2020-11-21 13:24:04.000000000 +0000
+++ gnome-maps-3.38.2/lib/meson.build	2020-12-04 18:10:56.477688187 +0000
@@ -1,8 +1,6 @@
 maps_h = 'maps.h'
 
 headers_private = files(
-	'maps-contact.h',
-	'maps-contact-store.h',
 	'maps-file-tile-source.h',
 	'maps-osm.h',
 	'maps-osm-changeset.h',
@@ -14,8 +12,6 @@
 )
 
 sources = files(
-	'maps-contact.c',
-	'maps-contact-store.c',
 	'maps-file-tile-source.c',
 	'maps-osm.c',
 	'maps-osm-changeset.c',
--- gnome-maps-3.38.2/src/application.js	2020-11-21 13:24:04.000000000 +0000
+++ gnome-maps-3.38.2/src/application.js	2020-12-04 18:10:08.554875218 +0000
@@ -129,17 +129,6 @@
     }
 
     _showContact(id) {
-        contactStore.lookup(id, (contact) => {
-            this.mark_busy();
-            if (!contact) {
-                this.unmark_busy();
-                return;
-            }
-            contact.geocode(() => {
-                this.unmark_busy();
-                this._mainWindow.mapView.showContact(contact);
-            });
-        });
     }
 
     _onShowContactActivate(action, parameter) {
@@ -148,15 +137,6 @@
         this._mainWindow.present();
 
         let id = parameter.deep_unpack();
-
-        if (contactStore.state === Maps.ContactStoreState.LOADED) {
-            this. _showContact(id);
-        } else {
-            Utils.once(contactStore, 'notify::state', () => {
-                if (contactStore.state === Maps.ContactStoreState.LOADED)
-                    this._showContact(id);
-            });
-        }
     }
 
     _onOsmAccountSetupActivate() {
@@ -167,29 +147,6 @@
     }
 
     _addContacts() {
-        let contacts = contactStore.get_contacts();
-
-        this._addContactsRecursive(contacts, 0);
-    }
-
-    _addContactsRecursive(contacts, index) {
-        if (index < contacts.length) {
-            let contact = contacts[index];
-
-            contact.geocode(() => {
-                contact.get_places().forEach((p) => {
-                    if (!p.location)
-                        return
-
-                    Utils.debug('Adding contact address: ' + p.name);
-                    let place = new ContactPlace.ContactPlace({ place: p,
-                                                                contact: contact });
-                    placeStore.addPlace(place, PlaceStore.PlaceType.CONTACT);
-                });
-
-                this._addContactsRecursive(contacts, index + 1);
-            });
-        }
     }
 
     _initPlaceStore() {
@@ -203,15 +160,6 @@
             log('Failed to parse Maps places file, ' +
                 'subsequent writes will overwrite the file!');
         }
-
-        if (contactStore.state === Maps.ContactStoreState.LOADED) {
-            this._addContacts();
-        } else {
-            Utils.once(contactStore, 'notify::state', () => {
-                if (contactStore.state === Maps.ContactStoreState.LOADED)
-                    this._addContacts();
-            });
-        }
     }
 
     _onNightModeChange(action) {
@@ -269,8 +217,6 @@
         networkMonitor.connect('network-changed',
                                this._checkNetwork.bind(this));
         checkInManager = new CheckIn.CheckInManager();
-        contactStore = new Maps.ContactStore();
-        contactStore.load();
         osmEdit = new OSMEdit.OSMEdit();
     }
 
