Patch for missing MSG_NOSIGNAL on Solaris

Adapted from https://redmine.openinfosecfoundation.org/issues/862

--- gst-plugins-bad-1.17.90/sys/shm/shmpipe.c	2020-08-20 16:14:27.072614000 +0000
+++ gst-plugins-bad-1.17.90/sys/shm/shmpipe.c	2020-08-24 18:26:59.074516565 +0000
@@ -470,6 +470,46 @@
   return ret;
 }
 
+#if !defined(MSG_NOSIGNAL) && !defined(SO_NOSIGPIPE) /* Solaris needs this */
+static ssize_t nosigpipe_send(int fd, const void *buffer, size_t size) {
+/*
+ * SIGPIPE handling similar to the approach described in
+ * http://krokisplace.blogspot.com/2010/02/suppressing-sigpipe-in-library.html
+ *
+ * and
+ * https://groups.google.com/forum/?fromgroups#!topic/comp.unix.programmer/Spk9NrhSMPk
+ */
+  sigset_t pending, blocked, set;
+  ssize_t count;
+  int saved, error;
+
+  sigpending(&pending);
+  if (!sigismember(&pending, SIGPIPE)) {
+    sigemptyset(&set);
+    sigaddset(&set, SIGPIPE);
+    if ((error = pthread_sigmask(SIG_BLOCK, (const sigset_t *)&set, (sigset_t *)&blocked)))
+      goto error;
+  }
+  count = send(fd, buffer, size, 0);
+  if (!sigismember(&pending, SIGPIPE)) {
+    saved = errno;
+    if (count == -1 && errno == EPIPE) {
+      sigemptyset(&set);
+      sigaddset(&set, SIGPIPE);
+      while (-1 == sigtimedwait(&set, NULL, &(struct timespec){ 0, 0 }) && errno == EINTR)
+        ;;
+    }
+    if ((error = pthread_sigmask(SIG_SETMASK, (const sigset_t *)&blocked, (sigset_t *)NULL))) goto error;
+      errno = saved;
+  }
+  return count;
+error:
+  errno = error;
+  return -1;
+}
+#endif
+
+
 static int
 send_command (int fd, struct CommandBuffer *cb, unsigned short int type,
     int area_id)
@@ -477,7 +517,11 @@
   cb->type = type;
   cb->area_id = area_id;
 
+#if !defined(MSG_NOSIGNAL) && !defined(SO_NOSIGPIPE) /* Solaris needs this */
+  if (nosigpipe_send(fd, cb, sizeof (struct CommandBuffer)) !=
+#else
   if (send (fd, cb, sizeof (struct CommandBuffer), MSG_NOSIGNAL) !=
+#endif
       sizeof (struct CommandBuffer))
     return 0;
 
@@ -519,7 +563,11 @@
     if (!send_command (client->fd, &cb, COMMAND_NEW_SHM_AREA, newarea->id))
       continue;
 
+#if !defined(MSG_NOSIGNAL) && !defined(SO_NOSIGPIPE) /* Solaris needs this */
+    if (nosigpipe_send(client->fd, newarea->shm_area_name, pathlen) !=
+#else
     if (send (client->fd, newarea->shm_area_name, pathlen, MSG_NOSIGNAL) !=
+#endif
         pathlen)
       continue;
     c++;
@@ -827,7 +875,11 @@
     goto error;
   }
 
+#if !defined(MSG_NOSIGNAL) && !defined(SO_NOSIGPIPE) /* Solaris needs this */
+  if (nosigpipe_send(fd, self->shm_area->shm_area_name, pathlen) !=
+#else
   if (send (fd, self->shm_area->shm_area_name, pathlen, MSG_NOSIGNAL) !=
+#endif
       pathlen) {
     fprintf (stderr, "Sending new shm area path failed: %s", strerror (errno));
     goto error;
