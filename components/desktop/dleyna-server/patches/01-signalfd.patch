--- a/server/daemon.c	2017-03-04 18:24:19.000000000 +0000
+++ b/server/daemon.c	2018-09-19 22:34:33.788375616 +0000
@@ -22,7 +22,11 @@
  */
 
 #include <glib.h>
+#ifdef HAS_SIGNALFD
 #include <sys/signalfd.h>
+#else
+#include <signal.h>
+#endif
 
 #include <libdleyna/core/main-loop.h>
 #include <libdleyna/server/control-point-server.h>
@@ -31,6 +35,7 @@
 
 static guint g_sig_id;
 
+#ifdef HAS_SIGNALFD
 static gboolean prv_quit_handler(GIOChannel *source, GIOCondition condition,
 				 gpointer user_data)
 {
@@ -74,12 +79,19 @@
 
 	return retval;
 }
+#else
+static void sigterm(int sig)
+{
+	dleyna_main_loop_quit();
+}
+#endif
 
 int main(int argc, char *argv[])
 {
-	sigset_t mask;
 	int retval = 1;
 
+#ifdef HAS_SIGNALFD
+	sigset_t mask;
 	sigemptyset(&mask);
 	sigaddset(&mask, SIGTERM);
 	sigaddset(&mask, SIGINT);
@@ -89,15 +101,24 @@
 
 	if (!prv_init_signal_handler(mask))
 		goto out;
+#else
+	struct sigaction sa;
+	memset(&sa, 0, sizeof(struct sigaction));
+	sa.sa_handler = sigterm;
+	sigaction(SIGTERM, &sa, NULL);
+	sigaction(SIGINT, &sa, NULL);
+#endif
 
 	retval = dleyna_main_loop_start(DLS_SERVER_SERVICE_NAME,
 					dleyna_control_point_get_server(),
 					NULL);
 
+#ifdef HAS_SIGNALFD
 out:
 
 	if (g_sig_id)
 		(void) g_source_remove(g_sig_id);
+#endif
 
 	return retval;
 }
--- a/test/dbus/dms-info.c	2017-03-04 18:24:19.000000000 +0000
+++ b/test/dbus/dms-info.c	2018-09-19 22:35:27.006384297 +0000
@@ -22,7 +22,11 @@
 
 #include <string.h>
 #include <stdio.h>
+#ifdef HAS_SIGNALFD
 #include <sys/signalfd.h>
+#else
+#include <signal.h>
+#endif
 #include <signal.h>
 #include <stdbool.h>
 
@@ -53,6 +57,8 @@
 	GDBusProxy *proxy;
 };
 
+dms_info_t info;
+
 static dms_server_data_t *prv_dms_server_data_new(GDBusProxy *proxy)
 {
 	dms_server_data_t *data = g_new(dms_server_data_t, 1);
@@ -311,6 +317,7 @@
 	return FALSE;
 }
 
+#ifdef HAS_SIGNALFD
 static bool prv_init_signal_handler(sigset_t mask, dms_info_t *info)
 {
 	bool retval = false;
@@ -345,20 +352,34 @@
 
 	return retval;
 }
+#else
+static void sigterm(int sig)
+{
+	GIOCondition condition;
+	prv_quit_handler(NULL, condition, &info);
+}
+#endif
 
 int main(int argc, char *argv[])
 {
-	dms_info_t info;
+#ifdef HAS_SIGNALFD
 	sigset_t mask;
 
-	memset(&info, 0, sizeof(info));
-
 	sigemptyset(&mask);
 	sigaddset(&mask, SIGTERM);
 	sigaddset(&mask, SIGINT);
 
 	if (sigprocmask(SIG_BLOCK, &mask, NULL) == -1)
 		goto on_error;
+#else
+	struct sigaction sa;
+	memset(&sa, 0, sizeof(struct sigaction));
+	sa.sa_handler = sigterm;
+	sigaction(SIGTERM, &sa, NULL);
+	sigaction(SIGINT, &sa, NULL);
+#endif
+
+	memset(&info, 0, sizeof(info));
 
 	g_type_init();
 
@@ -382,8 +403,10 @@
 
 	info.main_loop = g_main_loop_new(NULL, FALSE);
 
+#ifdef HAS_SIGNALFD
 	if (!prv_init_signal_handler(mask, &info))
 		goto on_error;
+#endif
 
 	g_main_loop_run(info.main_loop);
 
