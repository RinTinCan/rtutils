https://gitlab.gnome.org/GNOME/epiphany/-/merge_requests/508
https://gitlab.gnome.org/GNOME/epiphany/-/merge_requests/542

Add inline pdf viewing via pdf.js


diff -Naur epiphany-3.30.5/embed/ephy-embed-shell.c epiphany-3.30.5-patched/embed/ephy-embed-shell.c
--- epiphany-3.30.5/embed/ephy-embed-shell.c	2019-09-07 16:00:18.000000000 +0000
+++ epiphany-3.30.5-patched/embed/ephy-embed-shell.c	2020-05-12 18:55:42.093966162 +0000
@@ -25,6 +25,7 @@
 #include "ephy-about-handler.h"
 #include "ephy-dbus-util.h"
 #include "ephy-debug.h"
+#include "ephy-downloads-manager.h"
 #include "ephy-embed-container.h"
 #include "ephy-embed-prefs.h"
 #include "ephy-embed-type-builtins.h"
@@ -893,6 +894,47 @@
 }
 
 static void
+download_started_cb (WebKitWebContext *web_context,
+                     WebKitDownload   *download,
+                     EphyEmbedShell   *shell)
+{
+  EphyEmbedShellPrivate *priv = ephy_embed_shell_get_instance_private (shell);
+  EphyDownload *ephy_download;
+  gboolean ephy_download_set;
+  WebKitWebView *web_view;
+
+  /* Is download locked down? */
+  if (g_settings_get_boolean (EPHY_SETTINGS_LOCKDOWN,
+                              EPHY_PREFS_LOCKDOWN_SAVE_TO_DISK)) {
+    webkit_download_cancel (download);
+    return;
+  }
+
+  /* Only create an EphyDownload for the WebKitDownload if it doesn't exist yet.
+   * This can happen when the download has been started automatically by WebKit,
+   * due to a context menu action or policy checker decision. Downloads started
+   * explicitly by Epiphany are marked with ephy-download-set GObject data.
+   */
+  ephy_download_set = GPOINTER_TO_INT (g_object_get_data (G_OBJECT (download), "ephy-download-set"));
+  if (ephy_download_set)
+    return;
+
+  ephy_download = ephy_download_new (download);
+  web_view = webkit_download_get_web_view (download);
+  if (EPHY_IS_WEB_VIEW (web_view)) {
+    EphyEmbed *embed;
+
+    embed = EPHY_GET_EMBED_FROM_EPHY_WEB_VIEW (web_view);
+    ephy_embed_download_started (embed, ephy_download);
+
+    if (!ephy_web_view_in_pdf_viewer (EPHY_WEB_VIEW (web_view)))
+      ephy_downloads_manager_add_download (priv->downloads_manager, ephy_download);
+  } else {
+    ephy_downloads_manager_add_download (priv->downloads_manager, ephy_download);
+  }
+}
+
+static void
 ephy_embed_shell_startup (GApplication *application)
 {
   EphyEmbedShell *shell = EPHY_EMBED_SHELL (application);
@@ -995,6 +1037,8 @@
   webkit_web_context_register_uri_scheme (priv->web_context, "ephy-resource",
                                           (WebKitURISchemeRequestCallback)ephy_resource_request_cb,
                                           NULL, NULL);
+  webkit_security_manager_register_uri_scheme_as_secure (webkit_web_context_get_security_manager (priv->web_context),
+                                                         "ephy-resource");
 
   /* No support for FTP, try to open in nautilus instead of failing */
   webkit_web_context_register_uri_scheme (priv->web_context, "ftp",
@@ -1018,6 +1062,9 @@
   filters_dir = adblock_filters_dir (shell);
   priv->filters_manager = ephy_filters_manager_new (filters_dir);
   g_free (filters_dir);
+
+  g_signal_connect (priv->web_context, "download-started",
+                    G_CALLBACK (download_started_cb), shell);
 }
 
 static void
diff -Naur epiphany-3.30.5/embed/ephy-embed-utils.c epiphany-3.30.5-patched/embed/ephy-embed-utils.c
--- epiphany-3.30.5/embed/ephy-embed-utils.c	2020-05-12 19:11:51.153534142 +0000
+++ epiphany-3.30.5-patched/embed/ephy-embed-utils.c	2020-05-12 18:37:58.000000000 +0000
@@ -117,7 +117,7 @@
   if (address == NULL)
     return FALSE;
 
-  colonpos = (int)((g_strstr_len (address, 12, ":")) - address);
+  colonpos = (int)((strstr (address, ":")) - address);
 
   if (colonpos < 0)
     return FALSE;
@@ -131,6 +131,7 @@
                      g_ascii_strncasecmp (address, "blob", colonpos) &&
                      g_ascii_strncasecmp (address, "about", colonpos) &&
                      g_ascii_strncasecmp (address, "ephy-about", colonpos) &&
+                     g_ascii_strncasecmp (address, "ephy-resource", colonpos) &&
                      g_ascii_strncasecmp (address, "ephy-source", colonpos) &&
                      g_ascii_strncasecmp (address, "gopher", colonpos) &&
                      g_ascii_strncasecmp (address, "inspector", colonpos) &&
diff -Naur epiphany-3.30.5/embed/ephy-embed.c epiphany-3.30.5-patched/embed/ephy-embed.c
--- epiphany-3.30.5/embed/ephy-embed.c	2019-09-07 16:00:18.000000000 +0000
+++ epiphany-3.30.5-patched/embed/ephy-embed.c	2020-05-12 18:53:42.937430135 +0000
@@ -1002,3 +1002,137 @@
     gtk_container_remove (GTK_CONTAINER (embed->overlay), g_object_ref (GTK_WIDGET (container)));
   }
 }
+
+typedef struct {
+  char *document_uri;
+  char *remote_uri;
+  WebKitDownload *download;
+  EphyWebView *web_view;
+} PdfAsyncData;
+
+static PdfAsyncData *
+pdf_async_data_new (const char  *document_uri,
+                    const char  *remote_uri,
+                    EphyWebView *web_view)
+{
+  PdfAsyncData *data;
+
+  data = g_new0 (PdfAsyncData, 1);
+  data->document_uri = g_strdup (document_uri);
+  data->remote_uri = g_strdup (remote_uri);
+  data->web_view = web_view;
+
+  if (web_view)
+    g_object_add_weak_pointer (G_OBJECT (web_view), (gpointer *)&data->web_view);
+
+  return data;
+}
+
+static void
+pdf_async_data_free (PdfAsyncData *data)
+{
+  if (data->web_view)
+    g_object_remove_weak_pointer (G_OBJECT (data->web_view), (gpointer *)&data->web_view);
+
+  g_free (data->document_uri);
+  g_free (data->remote_uri);
+  g_free (data);
+}
+
+static void
+pdf_file_deleted (GObject      *source,
+                  GAsyncResult *res,
+                  gpointer      user_data)
+{
+  g_autoptr (GError) error = NULL;
+  if (!g_file_delete_finish (G_FILE (source), res, &error))
+    g_warning ("Could not delete temporary PDF file: %s", error->message);
+}
+
+static void
+pdf_file_loaded (GObject      *source,
+                 GAsyncResult *res,
+                 gpointer      user_data)
+{
+  PdfAsyncData *data = user_data;
+  WebKitWebView *web_view = WEBKIT_WEB_VIEW (data->web_view);
+  GBytes *html_file;
+  g_autoptr (GError) error = NULL;
+  g_autoptr (GString) html = NULL;
+  g_autofree gchar *b64 = NULL;
+  g_autofree gchar *requested_uri = NULL;
+  g_autofree char *file_data = NULL;
+  gsize len = 0;
+
+  if (!g_file_load_contents_finish (G_FILE (source), res, &file_data, &len, NULL, &error)) {
+    g_warning ("Could not read PDF file content: %s", error->message);
+    pdf_async_data_free (data);
+    return;
+  }
+
+  html_file = g_resources_lookup_data ("/org/gnome/epiphany/pdfjs/web/viewer.html", 0, NULL);
+
+  b64 = g_base64_encode ((const guchar *)file_data, len);
+  g_file_delete_async (G_FILE (source), G_PRIORITY_DEFAULT, NULL, pdf_file_deleted, NULL);
+
+  html = g_string_new ("");
+  g_string_printf (html, g_bytes_get_data (html_file, NULL), b64, g_path_get_basename (data->remote_uri));
+
+  webkit_web_view_load_alternate_html (web_view, html->str, data->remote_uri, "ephy-resource:///org/gnome/epiphany/pdfjs/web/");
+
+  /* FIXME: Necessary WebKit API to access security level (TLS certificate) of a download is not
+   * available. Please fix this line once available.
+   */
+  ephy_web_view_set_security_level (data->web_view, EPHY_SECURITY_LEVEL_LOCAL_PAGE);
+
+  pdf_async_data_free (data);
+}
+
+static void
+pdf_download_finished_cb (WebKitDownload *download,
+                          EphyEmbed      *embed)
+{
+  EphyWebView *view = ephy_embed_get_web_view (embed);
+  WebKitURIRequest *request = webkit_download_get_request (download);
+  g_autoptr (GFile) file = NULL;
+  PdfAsyncData *pdf_data;
+  const char *document_uri = webkit_download_get_destination (download);
+  const char *remote_uri = webkit_uri_request_get_uri (request);
+
+  file = g_file_new_for_uri (document_uri);
+
+  pdf_data = pdf_async_data_new (document_uri, remote_uri, view);
+  g_file_load_contents_async (file, NULL, pdf_file_loaded, pdf_data);
+}
+
+static gboolean
+pdf_download_decide_destination_cb (WebKitDownload *wk_download,
+                                    gchar          *suggested_filename,
+                                    gpointer        user_data)
+{
+  EphyWebView *web_view = ephy_embed_get_web_view (EPHY_EMBED (user_data));
+
+  if (ephy_web_view_in_pdf_viewer (web_view)) {
+    g_autofree gchar *tmp_file = g_strdup_printf ("%s/%s", g_get_tmp_dir (), suggested_filename);
+    g_autofree gchar *file_uri = g_filename_to_uri (tmp_file, NULL, NULL);
+
+    webkit_download_set_allow_overwrite (wk_download, TRUE);
+    webkit_download_set_destination (wk_download, file_uri);
+    return TRUE;
+  }
+
+  return FALSE;
+}
+
+void
+ephy_embed_download_started (EphyEmbed    *embed,
+                             EphyDownload *ephy_download)
+{
+  EphyWebView *web_view = ephy_embed_get_web_view (embed);
+  WebKitDownload *download = ephy_download_get_webkit_download (ephy_download);
+
+  if (ephy_web_view_in_pdf_viewer (web_view)) {
+    g_signal_connect_object (download, "finished", G_CALLBACK (pdf_download_finished_cb), embed, 0);
+    g_signal_connect_object (download, "decide-destination", G_CALLBACK (pdf_download_decide_destination_cb), embed, 0);
+  }
+}
diff -Naur epiphany-3.30.5/embed/ephy-embed.h epiphany-3.30.5-patched/embed/ephy-embed.h
--- epiphany-3.30.5/embed/ephy-embed.h	2019-09-07 16:00:18.000000000 +0000
+++ epiphany-3.30.5-patched/embed/ephy-embed.h	2020-05-12 18:53:42.937552133 +0000
@@ -54,5 +54,7 @@
 const char      *ephy_embed_get_title                     (EphyEmbed *embed);
 void             ephy_embed_attach_notification_container (EphyEmbed *embed);
 void             ephy_embed_detach_notification_container (EphyEmbed *embed);
+void             ephy_embed_download_started              (EphyEmbed    *embed,
+                                                           EphyDownload *ephy_download);
 
 G_END_DECLS
diff -Naur epiphany-3.30.5/embed/ephy-web-view.c epiphany-3.30.5-patched/embed/ephy-web-view.c
--- epiphany-3.30.5/embed/ephy-web-view.c	2019-09-07 16:00:18.000000000 +0000
+++ epiphany-3.30.5-patched/embed/ephy-web-view.c	2020-05-12 18:53:42.938463816 +0000
@@ -79,6 +79,7 @@
   guint load_failed : 1;
   guint history_frozen : 1;
   guint ever_committed : 1;
+  guint in_pdf_viewer : 1;
 
   char *address;
   char *display_address;
@@ -1098,8 +1099,11 @@
                 GParamSpec    *spec,
                 gpointer       data)
 {
-  ephy_web_view_set_address (EPHY_WEB_VIEW (web_view),
-                             webkit_web_view_get_uri (web_view));
+  EphyWebView *view = EPHY_WEB_VIEW (web_view);
+
+  if (!view->in_pdf_viewer)
+    ephy_web_view_set_address (view,
+                               webkit_web_view_get_uri (web_view));
 }
 
 static void
@@ -1399,6 +1403,14 @@
   response_decision = WEBKIT_RESPONSE_POLICY_DECISION (decision);
   response = webkit_response_policy_decision_get_response (response_decision);
   mime_type = webkit_uri_response_get_mime_type (response);
+  request = webkit_response_policy_decision_get_request (response_decision);
+  request_uri = webkit_uri_request_get_uri (request);
+
+  if (strcmp (mime_type, "application/pdf") == 0) {
+    EphyWebView *view = EPHY_WEB_VIEW (web_view);
+
+    view->in_pdf_viewer = TRUE;
+  }
 
   /* If WebKit can't handle the mime type start the download
      process */
@@ -1406,8 +1418,6 @@
     return FALSE;
 
   /* If it's not the main resource we don't need to set the document type. */
-  request = webkit_response_policy_decision_get_request (response_decision);
-  request_uri = webkit_uri_request_get_uri (request);
   main_resource = webkit_web_view_get_main_resource (web_view);
   if (g_strcmp0 (webkit_web_resource_get_uri (main_resource), request_uri) != 0)
     return FALSE;
@@ -1812,7 +1822,7 @@
   WebKitSecurityManager *security_manager;
   SoupURI *soup_uri;
 
-  if (view->loading_error_page)
+  if (view->loading_error_page || view->in_pdf_viewer)
     return;
 
   toplevel = gtk_widget_get_toplevel (GTK_WIDGET (view));
@@ -1899,6 +1909,8 @@
       if (ephy_embed_utils_is_no_show_address (uri))
         ephy_web_view_freeze_history (view);
 
+      view->in_pdf_viewer = FALSE;
+
       if (!ephy_web_view_is_history_frozen (view)) {
         char *history_uri = NULL;
 
@@ -3759,3 +3771,9 @@
 {
   return view->reader_active;
 }
+
+gboolean
+ephy_web_view_in_pdf_viewer (EphyWebView *web_view)
+{
+  return web_view->in_pdf_viewer;
+}
diff -Naur epiphany-3.30.5/embed/ephy-web-view.h epiphany-3.30.5-patched/embed/ephy-web-view.h
--- epiphany-3.30.5/embed/ephy-web-view.h	2020-05-12 19:11:51.153686169 +0000
+++ epiphany-3.30.5-patched/embed/ephy-web-view.h	2020-05-12 18:37:58.000000000 +0000
@@ -42,7 +42,8 @@
                                         "^data:.*$|" \
                                         "^file:.*$|" \
                                         "^inspector://.*$|" \
-                                        "^webkit://.*$" \
+                                        "^webkit://.*$|" \
+                                        "^ephy-resource://.*$" \
                                         ")"
 
 #define EPHY_WEB_VIEW_DOMAIN_REGEX "^localhost(\\.[^[:space:]]+)?(:\\d+)?(:[0-9]+)?(/.*)?$|" \
@@ -159,4 +160,6 @@
 
 gboolean                   ephy_web_view_get_reader_mode_state    (EphyWebView               *view);
 
+gboolean                   ephy_web_view_in_pdf_viewer             (EphyWebView              *view);
+
 G_END_DECLS
diff -Naur epiphany-3.30.5/meson.build epiphany-3.30.5-patched/meson.build
--- epiphany-3.30.5/meson.build	2020-05-12 19:11:51.133407895 +0000
+++ epiphany-3.30.5-patched/meson.build	2020-05-12 18:37:58.000000000 +0000
@@ -102,6 +102,7 @@
 subdir('po')
 subdir('lib')
 subdir('embed')
+subdir('third-party')
 subdir('src')
 subdir('tests')
 
diff -Naur epiphany-3.30.5/src/ephy-shell.c epiphany-3.30.5-patched/src/ephy-shell.c
--- epiphany-3.30.5/src/ephy-shell.c	2020-05-12 19:11:51.165264099 +0000
+++ epiphany-3.30.5-patched/src/ephy-shell.c	2020-05-12 18:53:24.937116094 +0000
@@ -24,7 +24,6 @@
 #include "ephy-shell.h"
 
 #include "ephy-debug.h"
-#include "ephy-downloads-manager.h"
 #include "ephy-embed-container.h"
 #include "ephy-embed-utils.h"
 #include "ephy-file-helpers.h"
@@ -281,36 +280,6 @@
 };
 
 static void
-download_started_cb (WebKitWebContext *web_context,
-                     WebKitDownload   *download,
-                     EphyShell        *shell)
-{
-  EphyDownload *ephy_download;
-  gboolean ephy_download_set;
-
-  /* Is download locked down? */
-  if (g_settings_get_boolean (EPHY_SETTINGS_LOCKDOWN,
-                              EPHY_PREFS_LOCKDOWN_SAVE_TO_DISK)) {
-    webkit_download_cancel (download);
-    return;
-  }
-
-  /* Only create an EphyDownload for the WebKitDownload if it doesn't exist yet.
-   * This can happen when the download has been started automatically by WebKit,
-   * due to a context menu action or policy checker decision. Downloads started
-   * explicitly by Epiphany are marked with ephy-download-set GObject data.
-   */
-  ephy_download_set = GPOINTER_TO_INT (g_object_get_data (G_OBJECT (download), "ephy-download-set"));
-  if (ephy_download_set)
-    return;
-
-  ephy_download = ephy_download_new (download);
-  ephy_downloads_manager_add_download (ephy_embed_shell_get_downloads_manager (EPHY_EMBED_SHELL (shell)),
-                                       ephy_download);
-  g_object_unref (ephy_download);
-}
-
-static void
 register_synchronizable_managers (EphyShell       *shell,
                                   EphySyncService *service)
 {
@@ -387,10 +356,6 @@
   G_APPLICATION_CLASS (ephy_shell_parent_class)->startup (application);
 
   /* We're not remoting; start our services */
-  g_signal_connect (ephy_embed_shell_get_web_context (embed_shell),
-                    "download-started",
-                    G_CALLBACK (download_started_cb),
-                    application);
 
   builder = gtk_builder_new ();
   gtk_builder_add_from_resource (builder,
diff -Naur epiphany-3.30.5/src/ephy-window.c epiphany-3.30.5-patched/src/ephy-window.c
--- epiphany-3.30.5/src/ephy-window.c	2019-09-07 16:00:18.000000000 +0000
+++ epiphany-3.30.5-patched/src/ephy-window.c	2020-05-12 18:37:58.000000000 +0000
@@ -2475,6 +2475,9 @@
 download_only_load_cb (EphyWebView *view,
                        EphyWindow  *window)
 {
+  if (ephy_web_view_in_pdf_viewer (view))
+    return;
+
   if (gtk_notebook_get_n_pages (window->notebook) == 1) {
     ephy_web_view_load_homepage (view);
     return;
diff -Naur epiphany-3.30.5/src/meson.build epiphany-3.30.5-patched/src/meson.build
--- epiphany-3.30.5/src/meson.build	2019-09-07 16:00:18.000000000 +0000
+++ epiphany-3.30.5-patched/src/meson.build	2020-05-12 18:37:58.000000000 +0000
@@ -117,7 +117,8 @@
 
 epiphany_sources = [
   'ephy-main.c',
-  resources
+  resources,
+  pdfjs_resources
 ]
 
 executable('epiphany',
diff -Naur epiphany-3.30.5/third-party/meson.build epiphany-3.30.5-patched/third-party/meson.build
--- epiphany-3.30.5/third-party/meson.build	1970-01-01 01:00:00.000000000 +0000
+++ epiphany-3.30.5-patched/third-party/meson.build	2020-05-12 18:37:58.000000000 +0000
@@ -0,0 +1,6 @@
+pdfjs_resource_files = files('pdfjs/pdfjs.gresource.xml')
+pdfjs_resources = gnome.compile_resources('pdfjs-resources',
+    pdfjs_resource_files,
+    c_name: 'pdfjs',
+    source_dir: 'pdfjs'
+)
diff -Naur epiphany-3.30.5/third-party/pdfjs/epiphany-pdfjs-changes.patch epiphany-3.30.5-patched/third-party/pdfjs/epiphany-pdfjs-changes.patch
--- epiphany-3.30.5/third-party/pdfjs/epiphany-pdfjs-changes.patch	1970-01-01 01:00:00.000000000 +0000
+++ epiphany-3.30.5-patched/third-party/pdfjs/epiphany-pdfjs-changes.patch	2020-05-12 18:37:58.000000000 +0000
@@ -0,0 +1,124 @@
+diff -urN web2/locale/bn/viewer.properties web/locale/bn/viewer.properties
+diff -urN web2/locale/bo/viewer.properties web/locale/bo/viewer.properties
+diff -urN web2/locale/dsb/viewer.properties web/locale/dsb/viewer.properties
+diff -urN web2/locale/trs/viewer.properties web/locale/trs/viewer.properties
+diff -urN web2/viewer.css web/viewer.css
+--- web2/viewer.css	2019-10-03 23:09:02.000000000 +0200
++++ web/viewer.css	2020-01-02 00:24:02.404916203 +0100
+@@ -1,4 +1,5 @@
+ /* Copyright 2014 Mozilla Foundation
++ * Modifications made for Epiphany by Jan-Michael Brummer <jan.brummer@tabos.org>
+  *
+  * Licensed under the Apache License, Version 2.0 (the "License");
+  * you may not use this file except in compliance with the License.
+@@ -1189,6 +1190,7 @@
+ }
+ 
+ .dropdownToolbarButton > select {
++  -webkit-appearance: none;
+   min-width: 140px;
+   font-size: 12px;
+   color: hsl(0,0%,95%);
+@@ -1523,6 +1525,7 @@
+ }
+ 
+ .toolbarField.pageNumber {
++  -webkit-appearance: none;
+   -moz-appearance: textfield; /* hides the spinner in moz */
+   min-width: 16px;
+   text-align: right;
+diff -urN web2/viewer.html web/viewer.html
+--- web2/viewer.html	2019-10-03 23:09:02.000000000 +0200
++++ web/viewer.html	2020-01-03 10:26:10.089369058 +0100
+@@ -1,6 +1,7 @@
+ <!DOCTYPE html>
+ <!--
+ Copyright 2012 Mozilla Foundation
++* Modifications made for Epiphany by Jan-Michael Brummer <jan.brummer@tabos.org>
+ 
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+@@ -21,7 +22,7 @@
+ See https://github.com/adobe-type-tools/cmap-resources
+ -->
+ <html dir="ltr" mozdisallowselectionprint>
+-  <head>
++  <head pdf_data="%s" pdf_name="%s">
+     <meta charset="utf-8">
+     <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+     <meta name="google" content="notranslate">
+@@ -29,6 +30,7 @@
+     <title>PDF.js viewer</title>
+ 
+ 
++    <base href="ephy-resource:///org/gnome/epiphany/pdfjs/web/">
+     <link rel="stylesheet" href="viewer.css">
+ 
+ 
+diff -urN web2/viewer.js web/viewer.js
+--- web2/viewer.js	2019-10-03 23:09:32.000000000 +0200
++++ web/viewer.js	2020-01-03 12:10:34.247711756 +0100
+@@ -3,6 +3,7 @@
+  * Javascript code in this page
+  *
+  * Copyright 2019 Mozilla Foundation
++ * Modifications made for Epiphany by Jan-Michael Brummer <jan.brummer@tabos.org>
+  *
+  * Licensed under the Apache License, Version 2.0 (the "License");
+  * you may not use this file except in compliance with the License.
+@@ -1829,8 +1830,7 @@
+   var file;
+   var queryString = document.location.search.substring(1);
+   var params = (0, _ui_utils.parseQueryString)(queryString);
+-  file = 'file' in params ? params.file : _app_options.AppOptions.get('defaultUrl');
+-  validateFileURL(file);
++  file = ''
+   var fileInput = document.createElement('input');
+   fileInput.id = appConfig.openFileInputName;
+   fileInput.className = 'fileInput';
+@@ -1838,12 +1838,10 @@
+   fileInput.oncontextmenu = _ui_utils.noContextMenuHandler;
+   document.body.appendChild(fileInput);
+ 
+-  if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {
+-    appConfig.toolbar.openFile.setAttribute('hidden', 'true');
+-    appConfig.secondaryToolbar.openFileButton.setAttribute('hidden', 'true');
+-  } else {
+-    fileInput.value = null;
+-  }
++  appConfig.toolbar.openFile.setAttribute('hidden', 'true');
++  appConfig.secondaryToolbar.openFileButton.setAttribute('hidden', 'true');
++
++  appConfig.toolbar.viewBookmark.setAttribute('hidden', 'true');
+ 
+   fileInput.addEventListener('change', function (evt) {
+     var files = evt.target.files;
+@@ -1897,8 +1895,18 @@
+     }
+   }, true);
+ 
++  var file_name = document.head.getAttribute('pdf_name')
++  var raw = atob(document.head.getAttribute('pdf_data'));
++  var raw_length = raw.length;
++  var array = new Uint8Array(new ArrayBuffer(raw_length));
++
++  for(var i = 0; i < raw_length; i++) {
++    array[i] = raw.charCodeAt(i);
++  }
++
+   try {
+-    webViewerOpenFileViaURL(file);
++      PDFViewerApplication.open(array);
++      PDFViewerApplication.setTitleUsingUrl(file_name);
+   } catch (reason) {
+     PDFViewerApplication.l10n.get('loading_error', null, 'An error occurred while loading the PDF.').then(function (msg) {
+       PDFViewerApplication.error(msg, reason);
+@@ -7785,6 +7793,8 @@
+         }
+       }
+ 
++      // FIXME: This currently breaks Epiphany due to rewriting history with baseUrl
++      return;
+       if (shouldReplace) {
+         if (newUrl) {
+           window.history.replaceState(newState, '', newUrl);
diff -Naur epiphany-3.30.5/third-party/pdfjs/pdfjs_generate_resource.py epiphany-3.30.5-patched/third-party/pdfjs/pdfjs_generate_resource.py
--- epiphany-3.30.5/third-party/pdfjs/pdfjs_generate_resource.py	1970-01-01 01:00:00.000000000 +0000
+++ epiphany-3.30.5-patched/third-party/pdfjs/pdfjs_generate_resource.py	2020-05-12 18:37:58.000000000 +0000
@@ -0,0 +1,26 @@
+"""
+Pack pdf.js into a gresource file for Epiphany
+"""
+
+import os
+
+def create_resource():
+    """
+    Traverse the current directory and add everything among the first level to the gresource file
+    """
+    resource = open('pdfjs.gresource.xml', 'w')
+    resource.write('<?xml version="1.0" encoding="UTF-8"?>\n')
+    resource.write('<gresources>\n')
+    resource.write('\t<gresource prefix="/org/gnome/epiphany/pdfjs">\n')
+
+    for root, _, files in os.walk("."):
+        for file in files:
+            if len(root) > 1:
+                resource.write('\t\t<file compressed="true">' + root[2:] + '/' + file + '</file>\n')
+
+    resource.write('\t</gresource>\n')
+    resource.write('</gresources>\n')
+    resource.close()
+
+if __name__ == "__main__":
+    create_resource()
diff -Naur epiphany-3.30.5/third-party/pdfjs/README.epiphany epiphany-3.30.5-patched/third-party/pdfjs/README.epiphany
--- epiphany-3.30.5/third-party/pdfjs/README.epiphany	1970-01-01 01:00:00.000000000 +0000
+++ epiphany-3.30.5-patched/third-party/pdfjs/README.epiphany	2020-05-12 18:37:58.000000000 +0000
@@ -0,0 +1,67 @@
+# Embedded PDF Viewer based on pdf.js
+
+This directory contains an official pdf.js release version, distributed at: https://github.com/mozilla/pdf.js
+
+## Update process
+Grab a new official release (*-dist.zip) distributed at github and extract everything except viewer.[html/js/css] into this directory.
+Then recreate the resource xml file with `python pdfjs-generate-resource.py`
+
+The additional files within this directory are modified for Epiphany and shouldn't be changed automatically.
+
+## Modifications to viewer.html
+1. In order to circumvent CORS the pdf is downloaded and then embedded into the viewer.html file. Therefore the head has an
+extra attribute 'pdf_data="%s' which will be replace by Epiphany. Extracting this data is done in viewer.js.
+
+2. Futhermore 'pdf_name="%s"' is supplied to set the download file name.
+
+3. '<base href="ephy-resource:///org/gnome/epiphany/pdfjs/web/">' has been added to the head section.
+
+## Modifications to viewer.js
+
+function webViewerInitialized() has been changed:
+
+1. Set file to ''
+
+2. Replace the end of the function with:
+
+  var file_name = document.head.getAttribute('pdf_name')
+  var raw = atob(document.head.getAttribute('pdf_data'));
+  var raw_length = raw.length;
+  var array = new Uint8Array(new ArrayBuffer(raw_length));
+
+  for(var i = 0; i < raw_length; i++) {
+    array[i] = raw.charCodeAt(i);
+  }
+    
+  try {
+      PDFViewerApplication.open(array);
+      PDFViewerApplication.setTitleUsingUrl(file_name);
+  } catch (reason) {
+    PDFViewerApplication.l10n.get('loading_error', null, 'An error occurred while loading the PDF.').then(function (msg) {
+      PDFViewerApplication.error(msg, reason);
+    });
+  }
+
+3. Disable history modification, otherwise base url is set as main url and translation won't work.
+
+In _pushOrReplaceState early return before the window.history.xxx changes
+
+
+## Modifications to viewer.css
+
+Here are two small changes for webkit specific layout:
+
+1. Ading:
+-webkit-appearance: none; to .dropdownToolbarButton > select {
+
+2. Adding:
+.toolbarField.pageNumber { blocks in the css
+
+
+## Patch with changes for Epiphany
+
+For easier updating to a newer version there is a patch file `epiphany-pdfjs-changes.patch` containing the necessary changes to the viewer files.
+
+# Documentation created by Jan-Michael Brummer <jan.brummer@tabos.org>
+
+
