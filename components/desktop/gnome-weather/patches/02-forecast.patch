--- a/src/app/city.js	2017-03-19 21:02:20.000000000 +0000
+++ b/src/app/city.js	2018-11-29 15:17:12.465303719 +0000
@@ -187,8 +187,9 @@
         context.add_class(this._currentStyle);
 
         let forecasts = info.get_forecast_list();
+        let tz = GLib.TimeZone.new(info.location.get_timezone().get_tzid());
         for (let t of ['today', 'tomorrow'])
-            this._forecasts[t].update(forecasts, t);
+            this._forecasts[t].update(forecasts, tz, t);
 
         if (forecasts.length == 0) {
             this._weeklyForecasts.hide();
--- a/src/app/forecast.js	2018-11-29 14:58:04.910589776 +0000
+++ b/src/app/forecast.js	2018-11-29 15:08:41.050707797 +0000
@@ -49,23 +49,26 @@
 
     // Ensure that infos are sufficiently spaced, and
     // remove infos for the wrong day
-    _preprocess: function(now, infos) {
+    _preprocess: function(now, tz, infos) {
         let ret = [];
         let i;
         let current;
 
-        // First ignore all infos that are on a different
-        // day than now.
+        // First ignore all infos that are on a different day from now.
         // infos are ordered by time, and it's assumed at some point
         // there is an info for the current day (otherwise, nothing
-        // is shown)
+        // is shown).
+        //
+        // We must compare using the target timezone to ensure the 24-hour
+        // day period falls on the correct boundary.
         for (i = 0; i < infos.length; i++) {
             let info = infos[i];
 
             let [ok, date] = info.get_value_update();
-            let datetime = GLib.DateTime.new_from_unix_local(date);
+            let datetime = GLib.DateTime.new_from_unix_utc(date).to_timezone(tz);
 
-            if (Util.arrayEqual(now.get_ymd(), datetime.get_ymd())) {
+            if (Util.arrayEqual(now.get_ymd(), datetime.get_ymd()) &&
+                    now.get_hour() <= datetime.get_hour()) {
                 ret.push(info);
                 current = datetime;
                 break;
@@ -76,7 +79,7 @@
             let info = infos[i];
 
             let [ok, date] = info.get_value_update();
-            let datetime = GLib.DateTime.new_from_unix_local(date);
+            let datetime = GLib.DateTime.new_from_unix_utc(date).to_timezone(tz);
             if (datetime.difference(current) < ONE_HOUR)
                 continue;
 
@@ -91,21 +94,23 @@
         return ret;
     },
 
-    update: function(infos, day) {
-        let now = GLib.DateTime.new_now_local();
+    update: function(infos, tz, day) {
+        let now = GLib.DateTime.new_now(tz);
         if (day == 'tomorrow')
-            now = now.add_days(1);
-        let dayInfo = this._preprocess(now, infos);
+            now = now.add_hours(24 - now.get_hour());
+        // 'now' contains a TimeZone, but there is no accessor;
+        // thus, we must pass both the target time and zone
+        let dayInfo = this._preprocess(now, tz, infos);
 
         if (dayInfo.length == 0) {
             now = now.add_hours(-2);
-            dayInfo = this._preprocess(now, infos);
+            dayInfo = this._preprocess(now, tz, infos);
         }
 
         if (dayInfo.length > 0) {
             for (let i = 0; i < dayInfo.length; i++) {
                 let info = dayInfo[i];
-                this._addOneInfo(info, i);
+                this._addOneInfo(info, tz, i);
             }
         } else {
             let label = new Gtk.Label({ label: _("Forecast not available"),
@@ -115,9 +120,9 @@
         }
     },
 
-    _addOneInfo: function(info, col) {
+    _addOneInfo: function(info, tz, col) {
         let [ok, date] = info.get_value_update();
-        let datetime = GLib.DateTime.new_from_unix_local(date);
+        let datetime = GLib.DateTime.new_from_unix_utc(date).to_timezone(tz);
 
         let timeSetting = this._settings.get_string('clock-format');
         let timeFormat = null;
