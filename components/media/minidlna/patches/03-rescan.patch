--- a/minidlna.c	2017-08-24 18:28:25.000000000 +0000
+++ b/minidlna.c	2018-08-10 14:51:44.650627489 +0000
@@ -160,7 +160,6 @@
 static void
 sigusr1(int sig)
 {
-	signal(sig, sigusr1);
 	DPRINTF(E_WARN, L_GENERAL, "received signal %d, clear cache\n", sig);
 
 	memset(&clients, '\0', sizeof(clients));
@@ -169,10 +168,7 @@
 static void
 sighup(int sig)
 {
-	signal(sig, sighup);
-	DPRINTF(E_WARN, L_GENERAL, "received signal %d, re-read\n", sig);
-
-	reload_ifaces(1);
+	SETFLAG(RESCAN_MASK);
 }
 
 /* record the startup time */
@@ -301,6 +297,24 @@
 	int i, rows = 0;
 	int ret;
 
+#ifdef HAVE_INOTIFY
+	/*
+	 * On startup, check_db is called before the inotify thread
+	 * is started, so we are guaranteed to acquire the lock first.
+	 *
+	 * On subsequent rescan attempts, if we cannot acquire the lock
+	 * (because an inotify event is in progress), we simply return;
+	 * in this case, the main event thread will try again later, as
+	 * RESCAN_MASK will continue to be set.
+	 *
+	 * Return if we cannot acquire the lock.  The lock will be released
+	 * in the main event thread when the scan/rescan is performed
+	 * in a child process.
+	 */
+	if(pthread_mutex_trylock(&inotify_lock))
+		return;
+#endif /* HAVE_INOTIFY */
+
 	if (!new_db)
 	{
 		/* Check if any new media dirs appeared */
@@ -363,6 +377,10 @@
 	}
 	if (ret || GETFLAG(RESCAN_MASK))
 	{
+		sigset_t mask;
+		sigemptyset(&mask);
+		sigaddset(&mask, SIGHUP);
+		pthread_sigmask(SIG_BLOCK, &mask, NULL);
 #if USE_FORK
 		SETFLAG(SCANNING_MASK);
 		sqlite3_close(db);
@@ -370,6 +388,8 @@
 		open_db(&db);
 		if (*scanner_pid == 0) /* child (scanner) process */
 		{
+			signal(SIGHUP, SIG_IGN);
+			
 			start_scanner();
 			sqlite3_close(db);
 			log_close();
@@ -380,10 +400,20 @@
 		else if (*scanner_pid < 0)
 		{
 			start_scanner();
+			CLEARFLAG(SCANNING_MASK);
+			CLEARFLAG(RESCAN_MASK);
+#ifdef HAVE_INOTIFY
+			pthread_mutex_unlock(&inotify_lock);
+#endif /* HAVE_INOTIFY */
 		}
 #else
 		start_scanner();
+		CLEARFLAG(RESCAN_MASK);
+#ifdef HAVE_INOTIFY
+		pthread_mutex_unlock(&inotify_lock);
+#endif /* HAVE_INOTIFY */
 #endif
+		pthread_sigmask(SIG_UNBLOCK, &mask, NULL);
 	}
 }
 
@@ -979,9 +1009,11 @@
 		DPRINTF(E_FATAL, L_GENERAL, "Failed to set %s handler. EXITING.\n", "SIGINT");
 	if (signal(SIGPIPE, SIG_IGN) == SIG_ERR)
 		DPRINTF(E_FATAL, L_GENERAL, "Failed to set %s handler. EXITING.\n", "SIGPIPE");
-	if (signal(SIGHUP, &sighup) == SIG_ERR)
+	sa.sa_handler = sighup;
+	if (sigaction(SIGHUP, &sa, NULL))
 		DPRINTF(E_FATAL, L_GENERAL, "Failed to set %s handler. EXITING.\n", "SIGHUP");
-	signal(SIGUSR1, &sigusr1);
+	sa.sa_handler = sigusr1;
+	sigaction(SIGUSR1, &sa, NULL);
 	sa.sa_handler = process_handle_child_termination;
 	if (sigaction(SIGCHLD, &sa, NULL))
 		DPRINTF(E_FATAL, L_GENERAL, "Failed to set %s handler. EXITING.\n", "SIGCHLD");
@@ -1179,14 +1211,21 @@
 #endif
 		}
 
-		if (GETFLAG(SCANNING_MASK))
+		if (GETFLAG(SCANNING_MASK) && kill(scanner_pid, 0))
 		{
-			if (!scanner_pid || kill(scanner_pid, 0) != 0)
-			{
-				CLEARFLAG(SCANNING_MASK);
-				if (_get_dbtime() != lastdbtime)
-					updateID++;
-			}
+#ifdef HAVE_INOTIFY
+			pthread_mutex_unlock(&inotify_lock);
+#endif /* HAVE_INOTIFY */
+			CLEARFLAG(SCANNING_MASK);
+			CLEARFLAG(RESCAN_MASK);
+			if (_get_dbtime() != lastdbtime)
+				updateID++;
+		}
+
+		if (GETFLAG(RESCAN_MASK) &&
+				!GETFLAG(SCANNING_MASK))
+		{
+			check_db(db, -1, &scanner_pid);
 		}
 
 		/* select open sockets (SSDP, HTTP listen, and all HTTP soap sockets) */
@@ -1332,7 +1371,7 @@
 
 shutdown:
 	/* kill the scanner */
-	if (GETFLAG(SCANNING_MASK) && scanner_pid)
+	if (GETFLAG(SCANNING_MASK))
 		kill(scanner_pid, SIGKILL);
 
 	/* close out open sockets */
@@ -1363,6 +1402,7 @@
 	{
 		pthread_kill(inotify_thread, SIGCHLD);
 		pthread_join(inotify_thread, NULL);
+		pthread_mutex_destroy(&inotify_lock);
 	}
 
 	/* kill other child processes */
--- a/process.c	2017-08-24 18:28:25.000000000 +0000
+++ b/process.c	2018-07-22 19:57:53.476166882 +0000
@@ -93,14 +93,24 @@
 		return -1;
 	}
 
+	sigset_t mask;
+	sigemptyset(&mask);
+	sigaddset(&mask, SIGHUP);
+	pthread_sigmask(SIG_BLOCK, &mask, NULL);
+
 	pid_t pid = fork();
-	if (pid > 0)
+	if (pid)
 	{
-		if (client)
-			client->connections++;
-		add_process_info(pid, client);
-		number_of_children++;
-	}
+		pthread_sigmask(SIG_UNBLOCK, &mask, NULL);
+		
+		if (pid > 0) {
+			if (client)
+				client->connections++;
+			add_process_info(pid, client);
+			number_of_children++;
+		}
+	} else
+		signal(SIGHUP, SIG_IGN);
 
 	return pid;
 }
--- a/upnpglobalvars.c	2017-08-24 18:28:25.000000000 +0000
+++ b/upnpglobalvars.c	2018-08-09 19:41:52.693512392 +0000
@@ -88,3 +88,4 @@
 volatile short int quitting = 0;
 volatile uint32_t updateID = 0;
 const char *force_sort_criteria = NULL;
+pthread_mutex_t inotify_lock = PTHREAD_MUTEX_INITIALIZER;
--- a/upnpglobalvars.h	2017-08-24 18:28:25.000000000 +0000
+++ b/upnpglobalvars.h	2018-08-09 19:41:30.185739408 +0000
@@ -56,6 +56,7 @@
 #include "config.h"
 
 #include <sqlite3.h>
+#include <pthread.h>
 
 #define MINIDLNA_VERSION "1.2.1"
 
@@ -234,5 +235,6 @@
 extern volatile short int quitting;
 extern volatile uint32_t updateID;
 extern const char *force_sort_criteria;
+extern pthread_mutex_t inotify_lock;
 
 #endif
--- a/monitor.c	2018-08-09 20:00:25.351781647 +0000
+++ b/monitor.c	2018-08-10 14:45:25.851794656 +0000
@@ -630,12 +630,12 @@
 	if ( pollfds[0].fd < 0 )
 		DPRINTF(E_ERROR, L_INOTIFY, "inotify_init() failed!\n");
 
-	while( GETFLAG(SCANNING_MASK) )
-	{
-		if( quitting )
-			goto quitting;
-		sleep(1);
-	}
+	/*
+	 * before proceeding, ensure the initial database build has completed
+	 */
+	pthread_mutex_lock(&inotify_lock);
+	pthread_mutex_unlock(&inotify_lock);
+	
 	inotify_create_watches(pollfds[0].fd);
 	if (setpriority(PRIO_PROCESS, 0, 19) == -1)
 		DPRINTF(E_WARN, L_INOTIFY,  "Failed to reduce inotify thread priority\n");
@@ -676,6 +676,12 @@
 			buffer[BUF_LEN-1] = '\0';
 		}
 
+		if (pthread_mutex_trylock(&inotify_lock))
+		{
+			DPRINTF(E_WARN, L_INOTIFY, "Ignoring inotify during rescan.\n");
+			continue;
+		}
+
 		i = 0;
 		while( i < length )
 		{
@@ -733,6 +739,7 @@
 			}
 			i += EVENT_SIZE + event->len;
 		}
+		pthread_mutex_unlock(&inotify_lock);
 	}
 	inotify_remove_watches(pollfds[0].fd);
 quitting:
